{"version":3,"sources":["generated/apollo-components.tsx","components/Movies/Movies.js","components/Movie/Movie.js","components/Actors/Actors.js","components/Actor/Actor.js","components/Directors/Directors.js","components/Director/Director.js","components/Homepage/Homepage.js","components/Navigation/Navigation.js","components/App/App.js","index.js"],"names":["ActorOrderByInput","DirectorOrderByInput","MovieOrderByInput","MovielistNamesDocument","gql","CallActorsDocument","CallOneMovieDocument","CallDirectorsDocument","CallOneDirectorDocument","CallOneActorDocument","Movies","baseOptions","ApolloReactHooks","data","loading","error","ListGroup","movies","map","movie","Item","key","id","to","name","Movie","useParams","variables","description","actors","src","actor","Actors","Actor","Directors","console","log","directors","director","Director","Homepage","href","target","Navigation","Nav","Link","App","path","exact","component","client","ApolloClient","uri","process","root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9795dddb.chunk.js","sourcesContent":["import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nimport * as ApolloReactHooks from '@apollo/react-hooks';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  DateTime: any,\n};\n\nexport type Actor = {\n   __typename?: 'Actor',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  movieAlbum?: Maybe<Array<Movie>>,\n  createdAt: Scalars['DateTime'],\n  updatedAt: Scalars['DateTime'],\n};\n\n\nexport type ActorMovieAlbumArgs = {\n  where?: Maybe<MovieWhereInput>,\n  orderBy?: Maybe<MovieOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type ActorConnection = {\n   __typename?: 'ActorConnection',\n  pageInfo: PageInfo,\n  edges: Array<ActorEdge>,\n  aggregate: AggregateActor,\n};\n\nexport type ActorEdge = {\n   __typename?: 'ActorEdge',\n  node: Actor,\n  cursor: Scalars['String'],\n};\n\nexport enum ActorOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type ActorWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  movieAlbum_every?: Maybe<MovieWhereInput>,\n  movieAlbum_some?: Maybe<MovieWhereInput>,\n  movieAlbum_none?: Maybe<MovieWhereInput>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<ActorWhereInput>>,\n  OR?: Maybe<Array<ActorWhereInput>>,\n  NOT?: Maybe<Array<ActorWhereInput>>,\n};\n\nexport type ActorWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type AggregateActor = {\n   __typename?: 'AggregateActor',\n  count: Scalars['Int'],\n};\n\nexport type AggregateDirector = {\n   __typename?: 'AggregateDirector',\n  count: Scalars['Int'],\n};\n\nexport type AggregateMovie = {\n   __typename?: 'AggregateMovie',\n  count: Scalars['Int'],\n};\n\n\nexport type Director = {\n   __typename?: 'Director',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  movieAlbum?: Maybe<Array<Movie>>,\n  createdAt: Scalars['DateTime'],\n  updatedAt: Scalars['DateTime'],\n};\n\n\nexport type DirectorMovieAlbumArgs = {\n  where?: Maybe<MovieWhereInput>,\n  orderBy?: Maybe<MovieOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type DirectorConnection = {\n   __typename?: 'DirectorConnection',\n  pageInfo: PageInfo,\n  edges: Array<DirectorEdge>,\n  aggregate: AggregateDirector,\n};\n\nexport type DirectorEdge = {\n   __typename?: 'DirectorEdge',\n  node: Director,\n  cursor: Scalars['String'],\n};\n\nexport enum DirectorOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type DirectorWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  movieAlbum_every?: Maybe<MovieWhereInput>,\n  movieAlbum_some?: Maybe<MovieWhereInput>,\n  movieAlbum_none?: Maybe<MovieWhereInput>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<DirectorWhereInput>>,\n  OR?: Maybe<Array<DirectorWhereInput>>,\n  NOT?: Maybe<Array<DirectorWhereInput>>,\n};\n\nexport type DirectorWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Movie = {\n   __typename?: 'Movie',\n  id: Scalars['ID'],\n  name: Scalars['String'],\n  posterURL: Scalars['String'],\n  description: Scalars['String'],\n  year?: Maybe<Scalars['Int']>,\n  rating?: Maybe<Scalars['Int']>,\n  director: Director,\n  actors?: Maybe<Array<Actor>>,\n  filter?: Maybe<Scalars['String']>,\n};\n\n\nexport type MovieActorsArgs = {\n  where?: Maybe<ActorWhereInput>,\n  orderBy?: Maybe<ActorOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\nexport type MovieConnection = {\n   __typename?: 'MovieConnection',\n  pageInfo: PageInfo,\n  edges: Array<MovieEdge>,\n  aggregate: AggregateMovie,\n};\n\nexport type MovieEdge = {\n   __typename?: 'MovieEdge',\n  node: Movie,\n  cursor: Scalars['String'],\n};\n\nexport enum MovieOrderByInput {\n  IdAsc = 'id_ASC',\n  IdDesc = 'id_DESC',\n  NameAsc = 'name_ASC',\n  NameDesc = 'name_DESC',\n  PosterUrlAsc = 'posterURL_ASC',\n  PosterUrlDesc = 'posterURL_DESC',\n  DescriptionAsc = 'description_ASC',\n  DescriptionDesc = 'description_DESC',\n  YearAsc = 'year_ASC',\n  YearDesc = 'year_DESC',\n  RatingAsc = 'rating_ASC',\n  RatingDesc = 'rating_DESC',\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  UpdatedAtAsc = 'updatedAt_ASC',\n  UpdatedAtDesc = 'updatedAt_DESC'\n}\n\nexport type MovieWhereInput = {\n  id?: Maybe<Scalars['ID']>,\n  id_not?: Maybe<Scalars['ID']>,\n  id_in?: Maybe<Array<Scalars['ID']>>,\n  id_not_in?: Maybe<Array<Scalars['ID']>>,\n  id_lt?: Maybe<Scalars['ID']>,\n  id_lte?: Maybe<Scalars['ID']>,\n  id_gt?: Maybe<Scalars['ID']>,\n  id_gte?: Maybe<Scalars['ID']>,\n  id_contains?: Maybe<Scalars['ID']>,\n  id_not_contains?: Maybe<Scalars['ID']>,\n  id_starts_with?: Maybe<Scalars['ID']>,\n  id_not_starts_with?: Maybe<Scalars['ID']>,\n  id_ends_with?: Maybe<Scalars['ID']>,\n  id_not_ends_with?: Maybe<Scalars['ID']>,\n  name?: Maybe<Scalars['String']>,\n  name_not?: Maybe<Scalars['String']>,\n  name_in?: Maybe<Array<Scalars['String']>>,\n  name_not_in?: Maybe<Array<Scalars['String']>>,\n  name_lt?: Maybe<Scalars['String']>,\n  name_lte?: Maybe<Scalars['String']>,\n  name_gt?: Maybe<Scalars['String']>,\n  name_gte?: Maybe<Scalars['String']>,\n  name_contains?: Maybe<Scalars['String']>,\n  name_not_contains?: Maybe<Scalars['String']>,\n  name_starts_with?: Maybe<Scalars['String']>,\n  name_not_starts_with?: Maybe<Scalars['String']>,\n  name_ends_with?: Maybe<Scalars['String']>,\n  name_not_ends_with?: Maybe<Scalars['String']>,\n  posterURL?: Maybe<Scalars['String']>,\n  posterURL_not?: Maybe<Scalars['String']>,\n  posterURL_in?: Maybe<Array<Scalars['String']>>,\n  posterURL_not_in?: Maybe<Array<Scalars['String']>>,\n  posterURL_lt?: Maybe<Scalars['String']>,\n  posterURL_lte?: Maybe<Scalars['String']>,\n  posterURL_gt?: Maybe<Scalars['String']>,\n  posterURL_gte?: Maybe<Scalars['String']>,\n  posterURL_contains?: Maybe<Scalars['String']>,\n  posterURL_not_contains?: Maybe<Scalars['String']>,\n  posterURL_starts_with?: Maybe<Scalars['String']>,\n  posterURL_not_starts_with?: Maybe<Scalars['String']>,\n  posterURL_ends_with?: Maybe<Scalars['String']>,\n  posterURL_not_ends_with?: Maybe<Scalars['String']>,\n  description?: Maybe<Scalars['String']>,\n  description_not?: Maybe<Scalars['String']>,\n  description_in?: Maybe<Array<Scalars['String']>>,\n  description_not_in?: Maybe<Array<Scalars['String']>>,\n  description_lt?: Maybe<Scalars['String']>,\n  description_lte?: Maybe<Scalars['String']>,\n  description_gt?: Maybe<Scalars['String']>,\n  description_gte?: Maybe<Scalars['String']>,\n  description_contains?: Maybe<Scalars['String']>,\n  description_not_contains?: Maybe<Scalars['String']>,\n  description_starts_with?: Maybe<Scalars['String']>,\n  description_not_starts_with?: Maybe<Scalars['String']>,\n  description_ends_with?: Maybe<Scalars['String']>,\n  description_not_ends_with?: Maybe<Scalars['String']>,\n  year?: Maybe<Scalars['Int']>,\n  year_not?: Maybe<Scalars['Int']>,\n  year_in?: Maybe<Array<Scalars['Int']>>,\n  year_not_in?: Maybe<Array<Scalars['Int']>>,\n  year_lt?: Maybe<Scalars['Int']>,\n  year_lte?: Maybe<Scalars['Int']>,\n  year_gt?: Maybe<Scalars['Int']>,\n  year_gte?: Maybe<Scalars['Int']>,\n  rating?: Maybe<Scalars['Int']>,\n  rating_not?: Maybe<Scalars['Int']>,\n  rating_in?: Maybe<Array<Scalars['Int']>>,\n  rating_not_in?: Maybe<Array<Scalars['Int']>>,\n  rating_lt?: Maybe<Scalars['Int']>,\n  rating_lte?: Maybe<Scalars['Int']>,\n  rating_gt?: Maybe<Scalars['Int']>,\n  rating_gte?: Maybe<Scalars['Int']>,\n  director?: Maybe<DirectorWhereInput>,\n  actors_every?: Maybe<ActorWhereInput>,\n  actors_some?: Maybe<ActorWhereInput>,\n  actors_none?: Maybe<ActorWhereInput>,\n  createdAt?: Maybe<Scalars['DateTime']>,\n  createdAt_not?: Maybe<Scalars['DateTime']>,\n  createdAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  createdAt_lt?: Maybe<Scalars['DateTime']>,\n  createdAt_lte?: Maybe<Scalars['DateTime']>,\n  createdAt_gt?: Maybe<Scalars['DateTime']>,\n  createdAt_gte?: Maybe<Scalars['DateTime']>,\n  updatedAt?: Maybe<Scalars['DateTime']>,\n  updatedAt_not?: Maybe<Scalars['DateTime']>,\n  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>,\n  updatedAt_lt?: Maybe<Scalars['DateTime']>,\n  updatedAt_lte?: Maybe<Scalars['DateTime']>,\n  updatedAt_gt?: Maybe<Scalars['DateTime']>,\n  updatedAt_gte?: Maybe<Scalars['DateTime']>,\n  AND?: Maybe<Array<MovieWhereInput>>,\n  OR?: Maybe<Array<MovieWhereInput>>,\n  NOT?: Maybe<Array<MovieWhereInput>>,\n};\n\nexport type MovieWhereUniqueInput = {\n  id?: Maybe<Scalars['ID']>,\n};\n\nexport type Mutation = {\n   __typename?: 'Mutation',\n  deleteMovie?: Maybe<Movie>,\n};\n\n\nexport type MutationDeleteMovieArgs = {\n  where: MovieWhereUniqueInput\n};\n\nexport type PageInfo = {\n   __typename?: 'PageInfo',\n  hasNextPage: Scalars['Boolean'],\n  hasPreviousPage: Scalars['Boolean'],\n  startCursor?: Maybe<Scalars['String']>,\n  endCursor?: Maybe<Scalars['String']>,\n};\n\nexport type Query = {\n   __typename?: 'Query',\n  movie?: Maybe<Movie>,\n  movies: Array<Movie>,\n  moviesConnection: MovieConnection,\n  director?: Maybe<Director>,\n  directors: Array<Director>,\n  directorsConnection: DirectorConnection,\n  actor?: Maybe<Actor>,\n  actors: Array<Actor>,\n  actorsConnection: ActorConnection,\n  topNMovies: Array<Movie>,\n};\n\n\nexport type QueryMovieArgs = {\n  where: MovieWhereUniqueInput\n};\n\n\nexport type QueryMoviesArgs = {\n  where?: Maybe<MovieWhereInput>,\n  orderBy?: Maybe<MovieOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryMoviesConnectionArgs = {\n  where?: Maybe<MovieWhereInput>,\n  orderBy?: Maybe<MovieOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryDirectorArgs = {\n  where: DirectorWhereUniqueInput\n};\n\n\nexport type QueryDirectorsArgs = {\n  where?: Maybe<DirectorWhereInput>,\n  orderBy?: Maybe<DirectorOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryDirectorsConnectionArgs = {\n  where?: Maybe<DirectorWhereInput>,\n  orderBy?: Maybe<DirectorOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryActorArgs = {\n  where: ActorWhereUniqueInput\n};\n\n\nexport type QueryActorsArgs = {\n  where?: Maybe<ActorWhereInput>,\n  orderBy?: Maybe<ActorOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryActorsConnectionArgs = {\n  where?: Maybe<ActorWhereInput>,\n  orderBy?: Maybe<ActorOrderByInput>,\n  skip?: Maybe<Scalars['Int']>,\n  after?: Maybe<Scalars['String']>,\n  before?: Maybe<Scalars['String']>,\n  first?: Maybe<Scalars['Int']>,\n  last?: Maybe<Scalars['Int']>\n};\n\n\nexport type QueryTopNMoviesArgs = {\n  rating?: Maybe<Scalars['Int']>\n};\n\nexport type MovielistNamesQueryVariables = {};\n\n\nexport type MovielistNamesQuery = (\n  { __typename?: 'Query' }\n  & { movies: Array<(\n    { __typename?: 'Movie' }\n    & Pick<Movie, 'id' | 'name' | 'description'>\n    & { actors: Maybe<Array<(\n      { __typename?: 'Actor' }\n      & Pick<Actor, 'id' | 'name'>\n    )>> }\n  )> }\n);\n\nexport type CallActorsQueryVariables = {};\n\n\nexport type CallActorsQuery = (\n  { __typename?: 'Query' }\n  & { actors: Array<(\n    { __typename?: 'Actor' }\n    & Pick<Actor, 'id' | 'name'>\n  )> }\n);\n\nexport type CallOneMovieQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type CallOneMovieQuery = (\n  { __typename?: 'Query' }\n  & { movie: Maybe<(\n    { __typename?: 'Movie' }\n    & Pick<Movie, 'name' | 'id'>\n    & { actors: Maybe<Array<(\n      { __typename?: 'Actor' }\n      & Pick<Actor, 'name'>\n    )>> }\n  )> }\n);\n\nexport type CallDirectorsQueryVariables = {};\n\n\nexport type CallDirectorsQuery = (\n  { __typename?: 'Query' }\n  & { directors: Array<(\n    { __typename?: 'Director' }\n    & Pick<Director, 'id' | 'name'>\n  )> }\n);\n\nexport type CallOneDirectorQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type CallOneDirectorQuery = (\n  { __typename?: 'Query' }\n  & { director: Maybe<(\n    { __typename?: 'Director' }\n    & Pick<Director, 'id' | 'name'>\n  )> }\n);\n\nexport type CallOneActorQueryVariables = {\n  id: Scalars['ID']\n};\n\n\nexport type CallOneActorQuery = (\n  { __typename?: 'Query' }\n  & { actor: Maybe<(\n    { __typename?: 'Actor' }\n    & Pick<Actor, 'id' | 'name'>\n  )> }\n);\n\n\nexport const MovielistNamesDocument = gql`\n    query movielistNames {\n  movies {\n    id\n    name\n    description\n    actors {\n      id\n      name\n    }\n  }\n}\n    `;\nexport type MovielistNamesComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<MovielistNamesQuery, MovielistNamesQueryVariables>, 'query'>;\n\n    export const MovielistNamesComponent = (props: MovielistNamesComponentProps) => (\n      <ApolloReactComponents.Query<MovielistNamesQuery, MovielistNamesQueryVariables> query={MovielistNamesDocument} {...props} />\n    );\n    \nexport type MovielistNamesProps<TChildProps = {}> = ApolloReactHoc.DataProps<MovielistNamesQuery, MovielistNamesQueryVariables> | TChildProps;\nexport function withMovielistNames<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  MovielistNamesQuery,\n  MovielistNamesQueryVariables,\n  MovielistNamesProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, MovielistNamesQuery, MovielistNamesQueryVariables, MovielistNamesProps<TChildProps>>(MovielistNamesDocument, {\n      alias: 'movielistNames',\n      ...operationOptions\n    });\n};\n\n/**\n * __useMovielistNamesQuery__\n *\n * To run a query within a React component, call `useMovielistNamesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMovielistNamesQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMovielistNamesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMovielistNamesQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MovielistNamesQuery, MovielistNamesQueryVariables>) {\n        return ApolloReactHooks.useQuery<MovielistNamesQuery, MovielistNamesQueryVariables>(MovielistNamesDocument, baseOptions);\n      }\nexport function useMovielistNamesLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MovielistNamesQuery, MovielistNamesQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<MovielistNamesQuery, MovielistNamesQueryVariables>(MovielistNamesDocument, baseOptions);\n        }\nexport type MovielistNamesQueryHookResult = ReturnType<typeof useMovielistNamesQuery>;\nexport type MovielistNamesLazyQueryHookResult = ReturnType<typeof useMovielistNamesLazyQuery>;\nexport type MovielistNamesQueryResult = ApolloReactCommon.QueryResult<MovielistNamesQuery, MovielistNamesQueryVariables>;\nexport const CallActorsDocument = gql`\n    query callActors {\n  actors {\n    id\n    name\n  }\n}\n    `;\nexport type CallActorsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CallActorsQuery, CallActorsQueryVariables>, 'query'>;\n\n    export const CallActorsComponent = (props: CallActorsComponentProps) => (\n      <ApolloReactComponents.Query<CallActorsQuery, CallActorsQueryVariables> query={CallActorsDocument} {...props} />\n    );\n    \nexport type CallActorsProps<TChildProps = {}> = ApolloReactHoc.DataProps<CallActorsQuery, CallActorsQueryVariables> | TChildProps;\nexport function withCallActors<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CallActorsQuery,\n  CallActorsQueryVariables,\n  CallActorsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, CallActorsQuery, CallActorsQueryVariables, CallActorsProps<TChildProps>>(CallActorsDocument, {\n      alias: 'callActors',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCallActorsQuery__\n *\n * To run a query within a React component, call `useCallActorsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallActorsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallActorsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCallActorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CallActorsQuery, CallActorsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CallActorsQuery, CallActorsQueryVariables>(CallActorsDocument, baseOptions);\n      }\nexport function useCallActorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CallActorsQuery, CallActorsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CallActorsQuery, CallActorsQueryVariables>(CallActorsDocument, baseOptions);\n        }\nexport type CallActorsQueryHookResult = ReturnType<typeof useCallActorsQuery>;\nexport type CallActorsLazyQueryHookResult = ReturnType<typeof useCallActorsLazyQuery>;\nexport type CallActorsQueryResult = ApolloReactCommon.QueryResult<CallActorsQuery, CallActorsQueryVariables>;\nexport const CallOneMovieDocument = gql`\n    query callOneMovie($id: ID!) {\n  movie(where: {id: $id}) {\n    name\n    id\n    actors {\n      name\n    }\n  }\n}\n    `;\nexport type CallOneMovieComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CallOneMovieQuery, CallOneMovieQueryVariables>, 'query'> & ({ variables: CallOneMovieQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const CallOneMovieComponent = (props: CallOneMovieComponentProps) => (\n      <ApolloReactComponents.Query<CallOneMovieQuery, CallOneMovieQueryVariables> query={CallOneMovieDocument} {...props} />\n    );\n    \nexport type CallOneMovieProps<TChildProps = {}> = ApolloReactHoc.DataProps<CallOneMovieQuery, CallOneMovieQueryVariables> | TChildProps;\nexport function withCallOneMovie<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CallOneMovieQuery,\n  CallOneMovieQueryVariables,\n  CallOneMovieProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, CallOneMovieQuery, CallOneMovieQueryVariables, CallOneMovieProps<TChildProps>>(CallOneMovieDocument, {\n      alias: 'callOneMovie',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCallOneMovieQuery__\n *\n * To run a query within a React component, call `useCallOneMovieQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallOneMovieQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallOneMovieQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCallOneMovieQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CallOneMovieQuery, CallOneMovieQueryVariables>) {\n        return ApolloReactHooks.useQuery<CallOneMovieQuery, CallOneMovieQueryVariables>(CallOneMovieDocument, baseOptions);\n      }\nexport function useCallOneMovieLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CallOneMovieQuery, CallOneMovieQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CallOneMovieQuery, CallOneMovieQueryVariables>(CallOneMovieDocument, baseOptions);\n        }\nexport type CallOneMovieQueryHookResult = ReturnType<typeof useCallOneMovieQuery>;\nexport type CallOneMovieLazyQueryHookResult = ReturnType<typeof useCallOneMovieLazyQuery>;\nexport type CallOneMovieQueryResult = ApolloReactCommon.QueryResult<CallOneMovieQuery, CallOneMovieQueryVariables>;\nexport const CallDirectorsDocument = gql`\n    query callDirectors {\n  directors {\n    id\n    name\n  }\n}\n    `;\nexport type CallDirectorsComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CallDirectorsQuery, CallDirectorsQueryVariables>, 'query'>;\n\n    export const CallDirectorsComponent = (props: CallDirectorsComponentProps) => (\n      <ApolloReactComponents.Query<CallDirectorsQuery, CallDirectorsQueryVariables> query={CallDirectorsDocument} {...props} />\n    );\n    \nexport type CallDirectorsProps<TChildProps = {}> = ApolloReactHoc.DataProps<CallDirectorsQuery, CallDirectorsQueryVariables> | TChildProps;\nexport function withCallDirectors<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CallDirectorsQuery,\n  CallDirectorsQueryVariables,\n  CallDirectorsProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, CallDirectorsQuery, CallDirectorsQueryVariables, CallDirectorsProps<TChildProps>>(CallDirectorsDocument, {\n      alias: 'callDirectors',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCallDirectorsQuery__\n *\n * To run a query within a React component, call `useCallDirectorsQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallDirectorsQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallDirectorsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useCallDirectorsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CallDirectorsQuery, CallDirectorsQueryVariables>) {\n        return ApolloReactHooks.useQuery<CallDirectorsQuery, CallDirectorsQueryVariables>(CallDirectorsDocument, baseOptions);\n      }\nexport function useCallDirectorsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CallDirectorsQuery, CallDirectorsQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CallDirectorsQuery, CallDirectorsQueryVariables>(CallDirectorsDocument, baseOptions);\n        }\nexport type CallDirectorsQueryHookResult = ReturnType<typeof useCallDirectorsQuery>;\nexport type CallDirectorsLazyQueryHookResult = ReturnType<typeof useCallDirectorsLazyQuery>;\nexport type CallDirectorsQueryResult = ApolloReactCommon.QueryResult<CallDirectorsQuery, CallDirectorsQueryVariables>;\nexport const CallOneDirectorDocument = gql`\n    query callOneDirector($id: ID!) {\n  director(where: {id: $id}) {\n    id\n    name\n  }\n}\n    `;\nexport type CallOneDirectorComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CallOneDirectorQuery, CallOneDirectorQueryVariables>, 'query'> & ({ variables: CallOneDirectorQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const CallOneDirectorComponent = (props: CallOneDirectorComponentProps) => (\n      <ApolloReactComponents.Query<CallOneDirectorQuery, CallOneDirectorQueryVariables> query={CallOneDirectorDocument} {...props} />\n    );\n    \nexport type CallOneDirectorProps<TChildProps = {}> = ApolloReactHoc.DataProps<CallOneDirectorQuery, CallOneDirectorQueryVariables> | TChildProps;\nexport function withCallOneDirector<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CallOneDirectorQuery,\n  CallOneDirectorQueryVariables,\n  CallOneDirectorProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, CallOneDirectorQuery, CallOneDirectorQueryVariables, CallOneDirectorProps<TChildProps>>(CallOneDirectorDocument, {\n      alias: 'callOneDirector',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCallOneDirectorQuery__\n *\n * To run a query within a React component, call `useCallOneDirectorQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallOneDirectorQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallOneDirectorQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCallOneDirectorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CallOneDirectorQuery, CallOneDirectorQueryVariables>) {\n        return ApolloReactHooks.useQuery<CallOneDirectorQuery, CallOneDirectorQueryVariables>(CallOneDirectorDocument, baseOptions);\n      }\nexport function useCallOneDirectorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CallOneDirectorQuery, CallOneDirectorQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CallOneDirectorQuery, CallOneDirectorQueryVariables>(CallOneDirectorDocument, baseOptions);\n        }\nexport type CallOneDirectorQueryHookResult = ReturnType<typeof useCallOneDirectorQuery>;\nexport type CallOneDirectorLazyQueryHookResult = ReturnType<typeof useCallOneDirectorLazyQuery>;\nexport type CallOneDirectorQueryResult = ApolloReactCommon.QueryResult<CallOneDirectorQuery, CallOneDirectorQueryVariables>;\nexport const CallOneActorDocument = gql`\n    query callOneActor($id: ID!) {\n  actor(where: {id: $id}) {\n    id\n    name\n  }\n}\n    `;\nexport type CallOneActorComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<CallOneActorQuery, CallOneActorQueryVariables>, 'query'> & ({ variables: CallOneActorQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const CallOneActorComponent = (props: CallOneActorComponentProps) => (\n      <ApolloReactComponents.Query<CallOneActorQuery, CallOneActorQueryVariables> query={CallOneActorDocument} {...props} />\n    );\n    \nexport type CallOneActorProps<TChildProps = {}> = ApolloReactHoc.DataProps<CallOneActorQuery, CallOneActorQueryVariables> | TChildProps;\nexport function withCallOneActor<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  CallOneActorQuery,\n  CallOneActorQueryVariables,\n  CallOneActorProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, CallOneActorQuery, CallOneActorQueryVariables, CallOneActorProps<TChildProps>>(CallOneActorDocument, {\n      alias: 'callOneActor',\n      ...operationOptions\n    });\n};\n\n/**\n * __useCallOneActorQuery__\n *\n * To run a query within a React component, call `useCallOneActorQuery` and pass it any options that fit your needs.\n * When your component renders, `useCallOneActorQuery` returns an object from Apollo Client that contains loading, error, and data properties \n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCallOneActorQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCallOneActorQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<CallOneActorQuery, CallOneActorQueryVariables>) {\n        return ApolloReactHooks.useQuery<CallOneActorQuery, CallOneActorQueryVariables>(CallOneActorDocument, baseOptions);\n      }\nexport function useCallOneActorLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<CallOneActorQuery, CallOneActorQueryVariables>) {\n          return ApolloReactHooks.useLazyQuery<CallOneActorQuery, CallOneActorQueryVariables>(CallOneActorDocument, baseOptions);\n        }\nexport type CallOneActorQueryHookResult = ReturnType<typeof useCallOneActorQuery>;\nexport type CallOneActorLazyQueryHookResult = ReturnType<typeof useCallOneActorLazyQuery>;\nexport type CallOneActorQueryResult = ApolloReactCommon.QueryResult<CallOneActorQuery, CallOneActorQueryVariables>;","import React from 'react';\nimport {useMovielistNamesQuery} from '../../generated/apollo-components';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport {Link} from 'react-router-dom'\n\nconst Movies = () => {\n    const {data, loading, error} = useMovielistNamesQuery()\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    return (\n        <ListGroup>\n            {data.movies.map(movie => (\n                /*\n                <Link key={movie.id} to={`/movies/${movie.id}`}>\n                    <ListGroup.Item key={movie.id}>{movie.name}</ListGroup.Item>\n                </Link>\n                */\n                <ListGroup.Item key={movie.id}><Link to={`/movies/${movie.id}`}>{movie.name}</Link></ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n};\n\nexport default Movies;\n","import React from 'react'\nimport {useParams} from 'react-router-dom'\nimport {Link} from 'react-router-dom'\nimport {useCallOneMovieQuery} from '../../generated/apollo-components'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\nconst Movie = () => {\n    const {id} = useParams()\n\n    const { data, loading, error } = useCallOneMovieQuery({\n        variables: {\n           id,\n        },\n      });\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    //console.log(data)  // can see output with F12 in the browser\n    const { name, description, actors } = data.movie\n\n    return (\n        \n        <div>\n            <Link to=\"/movies\">Back to Top-N Movies</Link>\n            <br />\n            {name}\n            <br />\n            <img src={`https://source.unsplash.com/800x400/?${name}`}/>\n            <br />\n            {description}\n            <br />\n            <ListGroup>\n                {actors.map(actor => (\n                    <ListGroup.Item key={actor.id}>{actor.name}</ListGroup.Item>\n                ))}\n            </ListGroup>\n        </div>\n        \n        )\n    }\n    //<div>{data.movie.name}</div>\n    \nexport default Movie","import React from 'react';\nimport {useCallActorsQuery} from '../../generated/apollo-components';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport {Link} from 'react-router-dom'\n\nconst Actors = () => {\n    const {data, loading, error} = useCallActorsQuery()\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    return (\n        <ListGroup>\n            {data.actors.map(actor => (\n                <ListGroup.Item key={actor.id}><Link to={`/actors/${actor.id}`}>{actor.name}</Link></ListGroup.Item>\n            ))}\n        </ListGroup>\n        /*\n        <div>\n            {data.actors.map(actor => (\n                <div key={actor.id}>{actor.name}</div>\n            ))}\n        </div>\n        */\n    )\n};\n\nexport default Actors;\n","import React from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useCallOneActorQuery} from '../../generated/apollo-components'\n\nconst Actor = () => {\n    const {id} = useParams()\n\n    const { data, loading, error } = useCallOneActorQuery({\n        variables: {\n           id,\n        },\n      });\n\n      if (loading) return 'loading'\n      if (error) return 'error'\n      \n\n    return (\n        <div>{data.actor.name}</div>\n    )\n}\n\nexport default Actor","import React from 'react';\nimport {useCallDirectorsQuery} from '../../generated/apollo-components';\nimport ListGroup from 'react-bootstrap/ListGroup'\nimport {Link} from 'react-router-dom'\n\nconst Directors = () => {\n    console.log('LOADED')\n\n    const {data, loading, error} = useCallDirectorsQuery()\n\n    if (loading) return 'loading'\n    if (error) return 'error'\n\n    console.log(data)\n\n    return (\n        <ListGroup>\n            {data.directors.map(director => (\n                <ListGroup.Item key={director.id}><Link to={`/directors/${director.id}`}>{director.name}</Link></ListGroup.Item>\n            ))}\n        </ListGroup>\n    )\n};\n\nexport default Directors;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// before 42\n","import React from 'react'\nimport {useParams} from 'react-router-dom'\nimport {useCallOneDirectorQuery} from '../../generated/apollo-components'\n\nconst Director = () => {\n    const {id} = useParams()\n\n    const { data, loading, error } =  useCallOneDirectorQuery ({\n        variables: {\n           id,\n        },\n      });\n\n      if (loading) return 'loading'\n      if (error) return 'error'\n      \n\n    return (\n        <div>{data.director.name}</div>\n    )\n}\n\nexport default Director","import React from 'react';\nimport Movies from '../Movies/Movies'\nimport Movie from '../Movie/Movie'\nimport Actors from '../Actors/Actors'\nimport Actor from '../Actor/Actor'\nimport Directors from '../Directors/Directors'\nimport Director from '../Director/Director'\n\nimport {Switch, Route, Link} from 'react-router-dom'\n\nconst Homepage = () => {\n    return (\n        <div>\n            <h1>Top-N Movies</h1>\n            <img src={`https://source.unsplash.com/600x300/?puppy`}></img>\n            <br />\n            <Link to='/movies'>Movies</Link>\n            <br />\n            <Link to='/directors'>Directors</Link>\n            <br />\n            <Link to='/actors'>Actors</Link>\n            <br />\n            <a href=\"http://trailerstudy.herokuapp.com/3405\" target=\"_blank\">Trailer Study Example</a>\n        </div>\n    )\n};\n\nexport default Homepage;\n","import React from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Nav from 'react-bootstrap/Nav';\n\nconst Navigation = () => {\n    return (\n        <Nav>\n            <Nav.Item>\n                <LinkContainer to=\"/movies\">\n                    <Nav.Link>Movies</Nav.Link>\n                </LinkContainer>\n            </Nav.Item>\n\n            <Nav.Item>\n                <LinkContainer to=\"/directors\">\n                    <Nav.Link>Directors</Nav.Link>\n                </LinkContainer>\n            </Nav.Item>\n            <Nav.Item>\n                <LinkContainer to=\"/actors\">\n                    <Nav.Link>Actors</Nav.Link>\n                </LinkContainer>\n            </Nav.Item>\n            <Nav.Item>\n                <Nav.Link href=\"http://trailerstudy.herokuapp.com/3405\">Trailer Studdy Example</Nav.Link>\n            </Nav.Item>\n            <Nav.Item>\n                <LinkContainer to=\"/\">\n                    <Nav.Link >Home</Nav.Link>\n                </LinkContainer>\n            </Nav.Item>\n        </Nav>\n    )\n};\n\nexport default Navigation;\n\n    \n/*{ <Nav>\n  <Nav.Item>\n    <LinkContainer to=\"/movies\">\n        <Nav.Link>Movies</Nav.Link>\n    </LinkContainer>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link>Something</Nav.Link>\n  </Nav.Item>\n  <Nav.Item>\n    <Nav.Link>Link</Nav.Link>\n  </Nav.Item>\n</Nav> }*/\n\n\n\n\n\n","import React from 'react';\nimport Movies from '../Movies/Movies'\nimport Movie from '../Movie/Movie'\nimport Actors from '../Actors/Actors'\nimport Actor from '../Actor/Actor'\nimport Directors from '../Directors/Directors'\nimport Director from '../Director/Director'\nimport Homepage from '../Homepage/Homepage'\nimport Navigation from '../Navigation/Navigation'\n\nimport {Switch, Route, Link} from 'react-router-dom'\n\nconst App = () => {\n    return (\n        <div>\n            <Navigation />\n            <Switch>\n                <Route path='/' exact component={Homepage} />\n                <Route path='/movies' exact component={Movies} />\n                <Route path='/movies/:id' exact component={Movie} />\n                <Route path='/directors' exact component={Directors} />\n                <Route path='/directors/:id' exact component={Director} />\n                <Route path='/actors' exact component={Actors} />\n                <Route path='/actors/:id' exact component={Actor} />\n            </Switch>\n        </div>\n    )\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App/App';\n\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport {BrowserRouter as Router} from 'react-router-dom'\n\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_APOLLO_SERVER || 'http://localhost:4000',\n  });\n  \n  const root = (\n    <Router>\n      <ApolloProvider client={client}>\n        <App />\n      </ApolloProvider>\n    </Router>\n  );\n\nReactDOM.render(root, document.getElementById('root'));"],"sourceRoot":""}